<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\keil_630.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\keil_630.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 02 08:05:24 2021
<BR><P>
<H3>Maximum Stack Usage =        496 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; test_scdsm_mfio &rArr; execute_data_poll_mfio &rArr; read_fifo_data &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[13]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">AES_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[3a]">AFE_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[a]">CLKMAN_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[c]">FLC_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[19]">GPIO_P0_IRQHandler</a> from pb.o(i.GPIO_P0_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[1a]">GPIO_P1_IRQHandler</a> from pb.o(i.GPIO_P1_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[1b]">GPIO_P2_IRQHandler</a> from pb.o(i.GPIO_P2_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[1c]">GPIO_P3_IRQHandler</a> from pb.o(i.GPIO_P3_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[1d]">GPIO_P4_IRQHandler</a> from pb.o(i.GPIO_P4_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[1e]">GPIO_P5_IRQHandler</a> from pb.o(i.GPIO_P5_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[1f]">GPIO_P6_IRQHandler</a> from pb.o(i.GPIO_P6_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[3c]">GPIO_P7_IRQHandler</a> from pb.o(i.GPIO_P7_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[3d]">GPIO_P8_IRQHandler</a> from pb.o(i.GPIO_P8_IRQHandler) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[31]">I2CM0_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[32]">I2CM1_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[33]">I2CM2_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[34]">I2CS_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[14]">MAA_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[39]">OWM_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[11]">PMU_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[30]">PT_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[b]">PWRMAN_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[3f]">PreInit</a> from system_max3263x.o(i.PreInit) referenced from startup_max3263x.o(.text)
 <LI><a href="#[d]">RTC0_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[e]">RTC1_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[f]">RTC2_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[10]">RTC3_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[45]">Reset_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[38]">SPIB_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[35]">SPIM0_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[36]">SPIM1_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[37]">SPIM2_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[3b]">SPIS_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[40]">SystemInit</a> from system_max3263x.o(i.SystemInit) referenced from startup_max3263x.o(.text)
 <LI><a href="#[20]">TMR0_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[21]">TMR16_0_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[23]">TMR16_1_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[25]">TMR16_2_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[27]">TMR16_3_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[29]">TMR16_4_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[2b]">TMR16_5_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[22]">TMR1_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[24]">TMR2_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[26]">TMR3_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[28]">TMR4_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[2a]">TMR5_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[2c]">UART0_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[2d]">UART1_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[2e]">UART2_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[2f]">UART3_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[12]">USB_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[15]">WDT0_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[16]">WDT0_P_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[17]">WDT1_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[18]">WDT1_P_IRQHandler</a> from startup_max3263x.o(.text) referenced from startup_max3263x.o(RESET)
 <LI><a href="#[41]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_max3263x.o(.text)
 <LI><a href="#[42]">fputc</a> from stdio.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[3e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[44]">mfio_event_handler</a> from main.o(i.mfio_event_handler) referenced from main.o(i.test_scdsm_mfio)
 <LI><a href="#[43]">pbcallback</a> from main.o(i.pbcallback) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _main_scatterload &rArr; __scatterload &rArr; __main_after_scatterload &rArr; Board_Init &rArr; Console_Init &rArr; UART_Init &rArr; SYS_UART_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>$Super$$__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>

<P><STRONG><a name="[b1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[45]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_max3263x.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>AFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CLKMAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>FLC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2CM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2CM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2CM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MAA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PWRMAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPIS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TMR16_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR16_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR16_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR16_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR16_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT0_P_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT1_P_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max3263x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_TimeToTicks
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_WriteRegMulti
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __scatterload &rArr; __main_after_scatterload &rArr; Board_Init &rArr; Console_Init &rArr; UART_Init &rArr; SYS_UART_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[bb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_max3263x.o(i.$Sub$$__main_after_scatterload))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __main_after_scatterload &rArr; Board_Init &rArr; Console_Init &rArr; UART_Init &rArr; SYS_UART_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d]"></a>Board_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Board_Init &rArr; Console_Init &rArr; UART_Init &rArr; SYS_UART_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>

<P><STRONG><a name="[53]"></a>CLKMAN_GetClkScale</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, clkman.o(i.CLKMAN_GetClkScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLKMAN_GetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2CM_GetFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_GetFreq
</UL>

<P><STRONG><a name="[54]"></a>CLKMAN_SetClkScale</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, clkman.o(i.CLKMAN_SetClkScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2CM_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GPIO_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_Init
</UL>

<P><STRONG><a name="[82]"></a>CLKMAN_TrimRO</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, system_max3263x.o(i.CLKMAN_TrimRO))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4f]"></a>Console_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(i.Console_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Console_Init &rArr; UART_Init &rArr; SYS_UART_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[56]"></a>GPIO_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GPIO_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_module
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFIO_init_output
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFIO_Input
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TMR_Init
</UL>

<P><STRONG><a name="[59]"></a>GPIO_Handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gpio.o(i.GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P8_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P7_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P6_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_P0_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>GPIO_IntConfig</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gpio.o(i.GPIO_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_IntConfig &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[19]"></a>GPIO_P0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P0_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO_P1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P1_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO_P2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P2_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIO_P3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P3_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO_P4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P4_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPIO_P5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P5_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPIO_P6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P6_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIO_P7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P7_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIO_P8_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO_P8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_P8_IRQHandler &rArr; GPIO_Handler &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO_RegisterCallback</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gpio.o(i.GPIO_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_RegisterCallback &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[5d]"></a>I2CM_Init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, i2cm.o(i.I2CM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2CM_Init &rArr; SYS_I2CM_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2CM_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2CM_GetFreq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>I2CM_Read</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, i2cm.o(i.I2CM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2CM_Read &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_TxInProgress
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Rx
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_get_lock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_ReadReg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_read
</UL>

<P><STRONG><a name="[68]"></a>I2CM_Write</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, i2cm.o(i.I2CM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_TxInProgress
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Tx
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_get_lock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_free_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_WriteRegMulti
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_ReadReg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_write
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_i2c_wakeup_call
</UL>

<P><STRONG><a name="[7e]"></a>IOMAN_Config</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ioman.o(i.IOMAN_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2CM_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_Init
</UL>

<P><STRONG><a name="[51]"></a>LED_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[ad]"></a>LP_ClearWakeUpConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lp.o(i.LP_ClearWakeUpConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[ae]"></a>LP_ClearWakeUpFlags</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lp.o(i.LP_ClearWakeUpFlags))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[6b]"></a>LP_ConfigGPIOWakeUpDetect</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, lp.o(i.LP_ConfigGPIOWakeUpDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LP_ConfigGPIOWakeUpDetect &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[af]"></a>LP_EnterLP1</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, lp.o(i.LP_EnterLP1))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[6c]"></a>MAX20303_AppWrite</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, max20303.o(i.MAX20303_AppWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MAX20303_AppWrite &rArr; mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_WriteRegMulti
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_WriteReg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_ReadReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_LDO2Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_LDO1Config
</UL>

<P><STRONG><a name="[71]"></a>MAX20303_BuckBoostEnable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, max20303.o(i.MAX20303_BuckBoostEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MAX20303_BuckBoostEnable &rArr; MAX20303_WriteReg &rArr; I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_Init
</UL>

<P><STRONG><a name="[72]"></a>MAX20303_Init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, max20303.o(i.MAX20303_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MAX20303_Init &rArr; MAX20303_LDO2Config &rArr; MAX20303_AppWrite &rArr; mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_LDO2Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_LDO1Config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_BuckBoostEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>MAX20303_LDO1Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, max20303.o(i.MAX20303_LDO1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MAX20303_LDO1Config &rArr; MAX20303_AppWrite &rArr; mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_AppWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_Init
</UL>

<P><STRONG><a name="[74]"></a>MAX20303_LDO2Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, max20303.o(i.MAX20303_LDO2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MAX20303_LDO2Config &rArr; MAX20303_AppWrite &rArr; mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_AppWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_Init
</UL>

<P><STRONG><a name="[70]"></a>MAX20303_ReadReg</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, max20303.o(i.MAX20303_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MAX20303_ReadReg &rArr; I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_AppWrite
</UL>

<P><STRONG><a name="[6e]"></a>MAX20303_WriteReg</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, max20303.o(i.MAX20303_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MAX20303_WriteReg &rArr; I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_BuckBoostEnable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_AppWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_led0on
</UL>

<P><STRONG><a name="[6d]"></a>MAX20303_WriteRegMulti</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, max20303.o(i.MAX20303_WriteRegMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MAX20303_WriteRegMulti &rArr; I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_AppWrite
</UL>

<P><STRONG><a name="[76]"></a>MAX20303_led0on</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, max20303.o(i.MAX20303_led0on))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MAX20303_led0on &rArr; MAX20303_WriteReg &rArr; I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbcallback
</UL>

<P><STRONG><a name="[77]"></a>MFIO_Input</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.MFIO_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MFIO_Input &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>MFIO_init_output</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MFIO_init_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MFIO_init_output &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>PB_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pb.o(i.PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PB_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[7a]"></a>PB_RegisterCallback</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, pb.o(i.PB_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PB_RegisterCallback &rArr; GPIO_RegisterCallback &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RegisterCallback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>PreInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_max3263x.o(i.PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICC_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>Reset_module</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i.Reset_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Reset_module &rArr; mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>SYS_GPIO_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mxc_sys.o(i.SYS_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_SetClkScale
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_GetClkScale
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[7d]"></a>SYS_GetFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mxc_sys.o(i.SYS_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_I2CM_GetFreq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_GetFreq
</UL>

<P><STRONG><a name="[5f]"></a>SYS_I2CM_GetFreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mxc_sys.o(i.SYS_I2CM_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_I2CM_GetFreq &rArr; CLKMAN_GetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_GetClkScale
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Init
</UL>

<P><STRONG><a name="[5e]"></a>SYS_I2CM_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mxc_sys.o(i.SYS_I2CM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_I2CM_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_SetClkScale
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMAN_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Init
</UL>

<P><STRONG><a name="[86]"></a>SYS_TMR_GetFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mxc_sys.o(i.SYS_TMR_GetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_TimeToTicks
</UL>

<P><STRONG><a name="[7f]"></a>SYS_TMR_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mxc_sys.o(i.SYS_TMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
</UL>

<P><STRONG><a name="[80]"></a>SYS_UART_GetFreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mxc_sys.o(i.SYS_UART_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_UART_GetFreq &rArr; CLKMAN_GetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_GetClkScale
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[81]"></a>SYS_UART_Init</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, mxc_sys.o(i.SYS_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SYS_UART_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_SetClkScale
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMAN_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_max3263x.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>

<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 334 bytes, Stack size 4 bytes, system_max3263x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_TrimRO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max3263x.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>TMR32_Config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tmr.o(i.TMR32_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR32_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
</UL>

<P><STRONG><a name="[8d]"></a>TMR32_Start</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tmr.o(i.TMR32_Start))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
</UL>

<P><STRONG><a name="[85]"></a>TMR32_TimeToTicks</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, tmr.o(i.TMR32_TimeToTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TMR32_TimeToTicks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TMR_GetFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetPrescaler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
</UL>

<P><STRONG><a name="[88]"></a>TMR_Delay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tmr_utils.o(i.TMR_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_mxc_delay
</UL>

<P><STRONG><a name="[87]"></a>TMR_GetPrescaler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tmr.o(i.TMR_GetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_TimeToTicks
</UL>

<P><STRONG><a name="[8b]"></a>TMR_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tmr.o(i.TMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TMR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
</UL>

<P><STRONG><a name="[8a]"></a>TMR_TO_Check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tmr_utils.o(i.TMR_TO_Check))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[89]"></a>TMR_TO_Start</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tmr_utils.o(i.TMR_TO_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_TimeToTicks
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_Start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_Config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_Stop
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfio_event_handler
</UL>

<P><STRONG><a name="[55]"></a>UART_Init</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Init &rArr; SYS_UART_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Init
</UL>

<P><STRONG><a name="[8e]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bc]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[9f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[be]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bf]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[91]"></a>execute_data_poll_mfio</STRONG> (Thumb, 886 bytes, Stack size 104 bytes, main.o(i.execute_data_poll_mfio))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = execute_data_poll_mfio &rArr; read_fifo_data &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_has_mfio_event
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_clear_poll_event_flag
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo_status
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_avail_samples
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[97]"></a>exit_from_bootloader</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.exit_from_bootloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = exit_from_bootloader &rArr; write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stdio.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[9a]"></a>get_scdsm_state</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i.get_scdsm_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = get_scdsm_state &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[9c]"></a>get_ss_fw_version</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, main.o(i.get_ss_fw_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_ss_fw_version &rArr; in_bootldr_mode &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_bootldr_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>in_bootldr_mode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.in_bootldr_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = in_bootldr_mode &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ss_fw_version
</UL>

<P><STRONG><a name="[3e]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = main &rArr; test_scdsm_mfio &rArr; execute_data_poll_mfio &rArr; read_fifo_data &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_bootldr_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ss_fw_version
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_from_bootloader
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_module
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFIO_init_output
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFIO_Input
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a1]"></a>me11_i2c_wakeup_call</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.me11_i2c_wakeup_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_mxc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>

<P><STRONG><a name="[a2]"></a>me11_read</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, main.o(i.me11_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = me11_read &rArr; I2CM_Read &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>

<P><STRONG><a name="[a3]"></a>me11_write</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, main.o(i.me11_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = me11_write &rArr; I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>

<P><STRONG><a name="[44]"></a>mfio_event_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.mfio_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mfio_event_handler &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.test_scdsm_mfio)
</UL>
<P><STRONG><a name="[50]"></a>mxc_assert</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, board.o(i.mxc_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_SetClkScale
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKMAN_GetClkScale
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConfigGPIOWakeUpDetect
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RegisterCallback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>

<P><STRONG><a name="[6f]"></a>mxc_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.mxc_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_AppWrite
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_module
</UL>

<P><STRONG><a name="[65]"></a>mxc_free_lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mxc_lock.o(i.mxc_free_lock))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
</UL>

<P><STRONG><a name="[61]"></a>mxc_get_lock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mxc_lock.o(i.mxc_get_lock))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
</UL>

<P><STRONG><a name="[95]"></a>num_avail_samples</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i.num_avail_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = num_avail_samples &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_data_poll_mfio
</UL>

<P><STRONG><a name="[43]"></a>pbcallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.pbcallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = pbcallback &rArr; MAX20303_led0on &rArr; MAX20303_WriteReg &rArr; I2CM_Write &rArr; I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX20303_led0on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[9b]"></a>read_cmd</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, main.o(i.read_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_i2c_wakeup_call
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_mxc_delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo_status
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_avail_samples
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_bootldr_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ss_fw_version
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scdsm_state
</UL>

<P><STRONG><a name="[96]"></a>read_fifo_data</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, main.o(i.read_fifo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = read_fifo_data &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_data_poll_mfio
</UL>

<P><STRONG><a name="[94]"></a>read_fifo_status</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(i.read_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = read_fifo_status &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_data_poll_mfio
</UL>

<P><STRONG><a name="[a4]"></a>set_scdsm_state</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i.set_scdsm_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = set_scdsm_state &rArr; write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[ac]"></a>sh_clear_mfio_event_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.sh_clear_mfio_event_flag))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[93]"></a>sh_clear_poll_event_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.sh_clear_poll_event_flag))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_data_poll_mfio
</UL>

<P><STRONG><a name="[a5]"></a>sh_enable_algo_fast</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(i.sh_enable_algo_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sh_enable_algo_fast &rArr; sh_write_cmd_with_data &rArr; write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[92]"></a>sh_has_mfio_event</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.sh_has_mfio_event))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_data_poll_mfio
</UL>

<P><STRONG><a name="[a7]"></a>sh_set_data_type</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, main.o(i.sh_set_data_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sh_set_data_type &rArr; sh_write_cmd_with_data &rArr; write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[a8]"></a>sh_set_fifo_thresh</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, main.o(i.sh_set_fifo_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sh_set_fifo_thresh &rArr; sh_write_cmd_with_data &rArr; write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[a9]"></a>sh_set_report_period</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, main.o(i.sh_set_report_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sh_set_report_period &rArr; sh_write_cmd_with_data &rArr; write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[a6]"></a>sh_write_cmd_with_data</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, main.o(i.sh_write_cmd_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sh_write_cmd_with_data &rArr; write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_report_period
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_fifo_thresh
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_data_type
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_enable_algo_fast
</UL>

<P><STRONG><a name="[a0]"></a>test_scdsm_mfio</STRONG> (Thumb, 420 bytes, Stack size 72 bytes, main.o(i.test_scdsm_mfio))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = test_scdsm_mfio &rArr; execute_data_poll_mfio &rArr; read_fifo_data &rArr; read_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Check
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterLP1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ConfigGPIOWakeUpDetect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ClearWakeUpFlags
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_ClearWakeUpConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RegisterCallback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_report_period
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_fifo_thresh
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_data_type
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_enable_algo_fast
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_clear_mfio_event_flag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scdsm_state
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scdsm_state
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_data_poll_mfio
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_mxc_delay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntEnable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>write_cmd</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, main.o(i.write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = write_cmd &rArr; me11_i2c_wakeup_call &rArr; i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_i2c_wakeup_call
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_mxc_delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scdsm_state
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_from_bootloader
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[aa]"></a>GPIO_IntEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.GPIO_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[6a]"></a>GPIO_OutClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.GPIO_OutClr))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_module
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFIO_init_output
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>

<P><STRONG><a name="[79]"></a>GPIO_OutSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.GPIO_OutSet))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_module
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFIO_init_output
</UL>

<P><STRONG><a name="[69]"></a>LED_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_On &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxc_assert
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
</UL>

<P><STRONG><a name="[9e]"></a>i_mxc_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.i_mxc_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = i_mxc_delay &rArr; TMR_Delay &rArr; TMR_TO_Start &rArr; TMR_Init &rArr; SYS_TMR_Init &rArr; GPIO_Config &rArr; SYS_GPIO_Init &rArr; CLKMAN_SetClkScale &rArr; mxc_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scdsm_mfio
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;me11_i2c_wakeup_call
</UL>

<P><STRONG><a name="[99]"></a>UART_PutChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stdio.o(i.UART_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5b]"></a>IntConfig</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gpio.o(i.IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
</UL>

<P><STRONG><a name="[58]"></a>PinConfig</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, gpio.o(i.PinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[67]"></a>I2CM_Recover</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2cm.o(i.I2CM_Recover))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_TxInProgress
</UL>

<P><STRONG><a name="[63]"></a>I2CM_Rx</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, i2cm.o(i.I2CM_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2CM_Rx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_WriteTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
</UL>

<P><STRONG><a name="[62]"></a>I2CM_Tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, i2cm.o(i.I2CM_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2CM_Tx &rArr; I2CM_WriteTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_WriteTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
</UL>

<P><STRONG><a name="[64]"></a>I2CM_TxInProgress</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2cm.o(i.I2CM_TxInProgress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CM_TxInProgress
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Recover
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Read
</UL>

<P><STRONG><a name="[66]"></a>I2CM_WriteTxFifo</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, i2cm.o(i.I2CM_WriteTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2CM_WriteTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CM_Rx
</UL>

<P><STRONG><a name="[84]"></a>TMR32_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmr.o(i.TMR32_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR32_Config
</UL>

<P><STRONG><a name="[8c]"></a>TMR32_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tmr_utils.o(i.TMR32_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TO_Start
</UL>

<P><STRONG><a name="[7b]"></a>ICC_Enable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_max3263x.o(i.ICC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreInit
</UL>

<P><STRONG><a name="[8f]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
